import os
import shutil
import tempfile
import unittest.mock as mock
from django.test import TestCase, RequestFactory
from django.core.files import File
from dam.models import User, Profile, Photo, Gallery
from django.core.files.uploadedfile import SimpleUploadedFile

TEST_MEDIA_DIR = os.path.abspath(__file__ + '/../../../test_media/')
TEST_FILE = os.path.join(TEST_MEDIA_DIR, 'test.jpg')
TEST_FILE_WIDTH = 3278
TEST_FILE_HEIGHT = 2886
TEST_FILE_FORMAT = 'JPEG'


def gen_dummy_user():
    """
    All models depend on logged in user, so generate a standard user for tests
    :return: A User instance
    """
    user = User.objects.create_user('MrTest', 'test@test.com', 'secretwords')
    return user


class UserModelTest(TestCase):

    def setUp(self):
        self.dummy_user = gen_dummy_user()

    # TODO User and Profile tests


class PhotoModelTest(TestCase):

    def setUp(self):
        self.dummy_user = gen_dummy_user()
        self.test_image = SimpleUploadedFile(name='test.jpg',
                                             content=open(TEST_FILE, 'rb').read(),
                                             content_type='image/jpeg')

    def test_string_representation(self):
        photo = Photo(owner=self.dummy_user, image_data=self.test_image)
        photo.save()  # Note: full __str__ not generated until save
        # TODO mock models._unique_image_path to return fixed UUID, test that too
        str_filename_part, str_uuid_part = str(photo).split('@')
        self.assertEqual(str_filename_part, 'test.jpg')

    def test_owner_id(self):
        dummy_user_pk = self.dummy_user.pk
        photo = Photo(owner=self.dummy_user, image_data=self.test_image)
        self.assertEqual(dummy_user_pk, photo.owner.id)

    def test_image_size(self):
        photo = Photo(owner=self.dummy_user, image_data=self.test_image)
        self.assertEqual(photo.image_height, TEST_FILE_HEIGHT)
        self.assertEqual(photo.image_width, TEST_FILE_WIDTH)

    # TODO test proxy data (pre-render thumbnail from our test image?)

    def test_format(self):
        photo = Photo(owner=self.dummy_user, image_data=self.test_image)
        photo.save()  # Not determined until save
        self.assertEqual(photo.format, TEST_FILE_FORMAT)

    def test_exif_tags(self):
        photo = Photo(owner=self.dummy_user, image_data=self.test_image)
        photo.save()  # Not determined until save
        # TODO don't use magic numbers here
        # TODO figure out keys generated by PIL.image._getexif, test against values from exiftool
        # photo.exif_tags['Shutter Speed']
        # photo.exif_tags['F Number']
        # self.assertEqual(photo.exif_tags['iso'], str(400))

# TODO Gallery model test

# TODO view tests: https://docs.djangoproject.com/en/1.11/topics/testing/tools/#the-test-client

# TODO Selenium tests
